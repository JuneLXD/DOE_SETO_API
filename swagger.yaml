# const adminOnly = (res) => {
#   if(api_user !== 'admin'){
#     res.status(403).send({
#       "errorMessage": "Admin only function"
#     });
#   }
# }


# const handleEvent = (res, chaincodeFunction, functionType, chaincodeFunctionArgs) => {
#   const event = {
#     functionType: functionType,
#     chaincodeFunction: chaincodeFunction,
#     chaincodeFunctionArgs: chaincodeFunctionArgs,
#     chaincodeName: CHAINCODE_NAME
#   };

#   // Setting headers
#   res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
#   res.setHeader('Access-Control-Allow-Origin', '*');
#   res.setHeader('Access-Control-Allow-Methods', '*');

#   handler(event, (err, result) => {
#     if(err){
#       res.status(400).send({
#         "errorMessage": err
#       });
#     }
#     else{
#       res.status(200).send({
#         "result": result
#       });
#     }
#   });
# };


# async function getApiKeysFromEnvironment(){
#   const api_keys_json = process.env.API_KEYS;
#   const api_keys = JSON.parse(api_keys_json);
#   return api_keys;
# }

# app.use(async (req, res, next) => {
#   if (req.path === '/') {
#     return next();
#   }

#   const apiKey = req.headers['x-api-key'];
#   const api_keys = await getApiKeysFromEnvironment();

#   const api_matched = Object.keys(api_keys).includes(apiKey);

#   if (api_matched) {
#     api_user = api_keys[apiKey];
#     next();
#   } else {
#     api_user = null;
#     res.status(403).send({
#       "errorMessage": "Unauthorized"
#     });
#   }
# });

# app.get('/', (req, res) => {
#   res.status(200).send({
#     "result": "Message from DOE SETO Lambda Function, Everything is working fine"
#   });
# });

# app.get("/userVerify", (req, res) => {
#   res.status(200).send({
#     "result": "The api key match with the user: " + api_user
#   })
# });

# app.get("/household", (req, res) => {
#   const premiseID = req.query.premiseID;
#   handleEvent(res, "queryHousehold", "queryObject", { "key": premiseID, "value": {} });
# });

# app.post("/household", (req, res) => {
#   const value = JSON.parse(req.body);
#   handleEvent(res, "registerHousehold", "invoke", { "key": value.premiseID, "value": value });
# });

# app.delete("/household", (req, res) => {
#   const premiseID = req.query.premiseID;
#   handleEvent(res, "deleteHousehold", "invoke", { "key": premiseID, "value": {} });
# });

# app.put("/household", (req, res) => {
#   const value = JSON.parse(req.body);
#   handleEvent(res, "updateHousehold", "invoke", { "key": value.premiseID, "value": value });
# });

# app.get("/queryHouseholdHistory", (req, res) => {
#   const premiseID = req.query.premiseID;
#   handleEvent(res, "queryHouseholdHistory", "queryObject", { "key": premiseID, "value": {} });
# });

# app.get('/getAllHouseholds', (req, res) => {
#   handleEvent(res, "getAllHouseholds", "queryObject", {});
# });

# app.get('/reset', (req, res) => {
#   adminOnly(res);

#   handleEvent(res, "reset", "invoke", {});
# });

# app.get("/getBlockHeight", (req, res) => {
#   adminOnly(res);

#   handleEvent(res, "getBlockHeight", "admin", {});
# });

# app.get("/getBlocks", (req, res) => {
#   adminOnly(res);

#   const startBlockNumber = req.query.startBlockNumber;
#   const endBlockNumber = req.query.endBlockNumber;
#   handleEvent(res, "getBlocks", "admin", { "startBlockNumber": startBlockNumber, "endBlockNumber": endBlockNumber });
# });

# app.get("/getBlock", (req, res) => {
#   adminOnly(res);

#   const blockNumber = req.query.blockNumber;
#   handleEvent(res, "getBlock", "admin", { "blockNumber": blockNumber });
# });

# app.get("/getTransactionByHash", (req, res) => {
#   adminOnly(res);

#   const transactionHash = req.query.transactionHash;
#   handleEvent(res, "getTransactionByHash", "admin", { "transactionHash": transactionHash });
# });

# app.use((req, res) => {
#   res.status(404).send({
#     "errorMessage": "Route Not Found"
#   });
# });

openapi: 3.0.3
info:
  title: DOE SETO API
  description: This is an API for interacting with a Hyperledger Fabric blockchain via AWS API Gateway and Lambda functions for the DOE SETO project.
  version: 1.0.0
servers:
  - url: https://wx4j71p58h.execute-api.us-east-1.amazonaws.com/dev
tags:
  - name: General
    description: General routes
  - name: Household
    description: Household management routes

paths:
  # /:
  #   get:
  #     tags:
  #       - General
  #     summary: Root route (For testing site availability)
  #     responses:
  #       '200':
  #         description: Everything is working fine.

  /userVerify:
    get:
      tags:
        - General
      summary: Verify API key with the user
      parameters:
        - name: x-api-key
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The username matching the API key.
        '403':
          description: Unauthorized.
          

  
  /household:
    get:
      tags:
        - Household
      summary: Query a household by premiseID
      parameters:
        - name: premiseID
          in: query
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/SuccessResponseWithHousehold'
        '400':
          description: Failed operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWithUnauthoriedKey'

    post:
      tags:
        - Household
      summary: Register a new household
      parameters:
        - name: x-api-key
          in: header
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputHousehold'
      responses:
        '200':
          description: Registration successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseWithTxId'
        '400':
          description: Failed operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWithUnauthoriedKey'

    delete:
      tags:
        - Household
      summary: Delete a household by premiseID
      parameters:
        - name: premiseID
          in: query
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Registration successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseWithTxId'
        '400':
          description: Failed operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWithUnauthoriedKey'
              

    put:
      tags:
        - Household
      summary: Update a household
      parameters:
        - name: x-api-key
          in: header
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputHousehold'
      responses:
        '200':
          description: Registration successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseWithTxId'
        '400':
          description: Failed operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWithUnauthoriedKey'
                
  /queryHouseholdHistory:
    get:
      tags:
        - Household
      summary: Query the history of a household by premiseID
      parameters:
        - name: premiseID
          in: query
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '400':
          description: Failed operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWithUnauthoriedKey'
                
  /getAllHouseholds:
    get:
      tags:
        - Household
      summary: Query all households, return all existing households premise IDs.
      parameters:
        - name: x-api-key
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/HouseholdIDs'
        '400':
          description: Failed operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWithUnauthoriedKey'
                
components:
  schemas:
    SuccessResponseWithHousehold:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/OutputHousehold'
    SuccessResponseWithTxId:
      type: object
      example:
        result:
          transactionId: 'fade4944834314f3b451b591b865eb36186f8791191be6f11d8864a2c57f93f8'
      properties:
        result:
          $ref: '#/components/schemas/TransactionId'
    TransactionId:
      type: string
      description: The transaction ID of the write operation.
    ErrorResponse:
      type: object
      properties:
        errorMessage:
          type: string
          description: The error message from the API.
    HouseholdIDs:
      type: object
      properties:
        result:
          type: array
          items:
            type: string
          description: An array of household IDs.
      example:
        result: ["householdid1", "householdid2", "householdid3"]
    ErrorResponseWithUnauthoriedKey:
      type: object
      properties:
        errorMessage:
          type: string
          example: Unauthorized
    OutputHousehold:
      type: object
      properties:
        premiseID:
          type: string
          description: The ID of the premise.
        createTimeStamp:
          type: string
          description: The timestamp when the household was created. (yyyy-MM-dd HH:mm:ss)
          example: 2023-09-12 00:00:00
        updateTimeStamp:
          type: string
          description: The timestamp when the household was last updated. (yyyy-MM-dd HH:mm:ss)
          example: 2023-09-12 00:00:00
        electricityUse:
          type: number
          description: The electricity usage.
          format: float
        minBillAmount:
          type: number
          description: The minimum bill amount.
          format: float
        baselineCalculation:
          type: number
          description: The baseline calculation for electricity use.
          format: float
        coOptBillAmount:
          type: number
          description: The bill amount after co-optimization.
          format: float
        actualBillAmount:
          type: number
          description: The actual bill amount.
          format: float
        numOverrides:
          type: integer
          description: The number of overrides.
          format: int32
    InputHousehold:
      type: object
      properties:
        premiseID:
          type: string
          description: The ID of the premise.
        electricityUse:
          type: number
          description: The electricity usage.
          format: float
        minBillAmount:
          type: number
          description: The minimum bill amount.
          format: float
        baselineCalculation:
          type: number
          description: The baseline calculation for electricity use.
          format: float
        coOptBillAmount:
          type: number
          description: The bill amount after co-optimization.
          format: float
        actualBillAmount:
          type: number
          description: The actual bill amount.
          format: float
        numOverrides:
          type: integer
          description: The number of overrides.
          format: int32
